library.packages("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("rstudio/rticles")
install.packages("quantmod")
install.packages("ttr")
install.packages("TTR")
library(ggplot2)
qplot(displ, hwy, data = mpg, colour = factor(cyl))
qplot(carat, price, data = dsmall, colour = color)
qplot(displ, hwy, data = mpg, colour = factor(cyl)) + geom_smooth(data = subset(mpg,
cyl != 5), method = "lm")
qplot(displ, hwy, data = mpg,geom="histogram", colour = factor(cyl))
qplot(displ, hwy, data = mpg,geom="histogram", bin=0.1,colour = factor(cyl))
qplot(displ, hwy, data = mpg,geom="histogram")
qplot(displ,data = mpg,geom="histogram")
qplot(displ,hwy,geom="histogram")
qplot(mpg$displ,mpg$hwy,geom="histogram")
qplot(mpg$hwy,geom="histogram")
qplot(mpg$displ,mpg$hwy,geom="bar")
qplot(displ, hwy, data = mpg,geom="bar")
qplot( hwy, data = mpg,geom="bar")
qplot(hwy, data = mpg,geom="bar",binwidth=1)
qplot(hwy, data = mpg,geom="bar",binwidth=10)
qplot(hwy, data = mpg,geom="bar",binwidth=2)
qplot(displ, hwy, data = mpg,geom="line")
qplot(displ, data = mpg,geom="bar",weight=hwy)
qplot(displ, hwy, data = mpg,geom="line")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line") +
opts(drop = "legend_box")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line") +
opts(drop = "legend_box")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="bar",
stat="identity", position = "identity")
qplot(displ, hwy, data = mpg,geom="bar", colour = factor(cyl))
qplot(displ, hwy, data = mpg,geom="bar", colour = factor(cyl),stat="identity")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="bar",
stat="identity", position = "identity")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line") +
theme(drop = "legend_box")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line") +
drop = "legend_box"
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="bar",
stat="identity", position = "identity")
qplot(displ, hwy, data = mpg, colour = factor(cyl))
qplot(displ, hwy, data = mpg, colour = factor(cyl)) + geom_smooth(data = subset(mpg,
cyl != 5), method = "lm")
subset(mpg,
cyl != 5)
qplot(displ, hwy, data = mpg, facets = . ~ year) + geom_smooth()
x <- 1:10
y <- factor(letters[1:5])
qplot(x, x, size = x)
library(ggplot2)
x1 <- c(1, 10)
x <- 1:10
y <- factor(letters[1:5])
qplot(x, x, size = x)
qplot(x, x, 1:10, colour = x)
qplot(y, y, 1:10, shape = y)
qplot(y, y, 1:10, colour = y)
qplot(x, size = x)
x1 <- c(1, 10)
y1 <- c(1, 5)
p <- qplot(x1, y1, geom = "blank", xlab = NULL, ylab = NULL) + theme_bw()
p
p + coord_trans(y = "log10")
p + coord_polar()
p <- qplot(displ, hwy, data = mpg, colour = factor(cyl))
summary(p)
qplot(displ, hwy, data = mpg, colour = factor(cyl))
library(ggplot2)
## 通过ggplot创建图形对象
p <- ggplot(diamonds, aes(carat, price, colour = cut))
## 添加“点”几何对象
p <- p + layer(geom = "point")
p
p <- ggplot(diamonds, aes(carat, price, colour = cut))
## 添加“点”几何对象
p <- p + layer(geom = "point")
p <- ggplot(diamonds, aes(carat, price, colour = cut))
## 添加“点”几何对象
p <- p + layer(geom = "point")
## 例：手动创建图形对象并添加图层
p
p <- ggplot(diamonds, aes(x = carat))
p <- p + layer(geom = "bar", geom_params = list(fill = "steelblue"), stat = "bin",
stat_params = list(binwidth = 2))
p
p <- ggplot(diamonds, aes(x = carat))
p <- p + layer(geom = "bar", geom_params = list(fill = "steelblue"), stat = "bin",
stat_params = list(binwidth = 2))
p
## 应用“快捷函数”，得到与上例相同的图形
p + geom_histogram(binwidth = 2, fill = "steelblue")
## 在用ggplot创建的图形对象上添加图层
ggplot(msleep, aes(sleep_rem/sleep_total, awake)) + geom_point()
# 等价于
qplot(sleep_rem/sleep_total, awake, data = msleep)
# 也可以给qplot添加图层
qplot(sleep_rem/sleep_total, awake, data = msleep) + geom_smooth()
# 等价于
qplot(sleep_rem/sleep_total, awake, data = msleep, geom = c("point", "smooth"))
# 或
ggplot(msleep, aes(sleep_rem/sleep_total, awake)) + geom_point() + geom_smooth()
## 例：summary给出图形对象的默认设置和每个图层的信息
p <- ggplot(msleep, aes(sleep_rem/sleep_total, awake))
summary(p)
p <- p + geom_point()
summary(p)
## 例：用不同的数据初始化后添加相同的图层
library(scales)
bestfit <- geom_smooth(method = "lm", se = F, colour = alpha("steelblue", 0.5),
size = 2)
qplot(sleep_rem, sleep_total, data = msleep) + bestfit
qplot(awake, brainwt, data = msleep, log = "y") + bestfit
qplot(bodywt, brainwt, data = msleep, log = "xy") + bestfit
## 用%*%添加新的数据集来代替原来的数据集
p <- ggplot(mtcars, aes(mpg, wt, colour = cyl)) + geom_point()
p
mtcars <- transform(mtcars, mpg = mpg^2)
p %+% mtcars
aes(x = weight, y = height, colour = age)
# 也可以使用变量的函数值作为参数
aes(weight, height, colour = sqrt(age))
titanic2 <-read.csv("data/titanic2.csv",stringsAsFactors = FALSE)
head(titanic2)
# 计算不同类别的存活率= 存活人数/（存活人数+ 死亡人数）
#Step 1
tidy <- melt(titanic2, id = c("class", "age", "fate"),variable.name = "gender")
library(dplyr)
tidy <- melt(titanic2, id = c("class", "age", "fate"),variable.name = "gender")
head(tidy)
titanic2 <-read.csv("data/titanic2.csv",stringsAsFactors = FALSE)
head(titanic2)
# 计算不同类别的存活率= 存活人数/（存活人数+ 死亡人数）
#Step 1
tidy <- melt(titanic2, id = c("class", "age", "fate"),variable.name = "gender")
library(reshape2)
titanic2 <-read.csv("data/titanic2.csv",stringsAsFactors = FALSE)
head(titanic2)
# 计算不同类别的存活率= 存活人数/（存活人数+ 死亡人数）
#Step 1
tidy <- melt(titanic2, id = c("class", "age", "fate"),variable.name = "gender")
head(tidy)
#Step 2
tidy <- dcast(tidy, class + age + gender ~ fate,value.var = "value")
head(tidy)
#Step 3
tidy$rate <- round(tidy$survived /(tidy$survived + tidy$perished), 2)
head(tidy)
?dcast
